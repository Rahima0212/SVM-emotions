# -*- coding: utf-8 -*-
"""emotions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gjsiXjFMP4ujoV2LO3rfq-zxqc8aRO47
"""

import pandas as pd

# Load dataset
df = pd.read_csv("emotions.csv")

# Display first few rows
print(df.head())

import pandas as pd
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score

# Load the dataset
df = pd.read_csv('emotions.csv')

# Step 1: Preprocess the text
def clean_text(text):
    text = re.sub(r"http\S+", "", text)      # Remove URLs
    text = re.sub(r"@\w+", "", text)         # Remove mentions
    text = re.sub(r"[^a-zA-Z\s]", "", text)  # Remove punctuation and numbers
    return text.lower().strip()

df['clean_text'] = df['text'].apply(clean_text)

# Step 2: Vectorize the text using TF-IDF
vectorizer = TfidfVectorizer(max_features=1000)  # Reduced for speed
X = vectorizer.fit_transform(df['clean_text'])
y = df['label']

# Step 3: Handle missing values
if y.isnull().any():
    non_null_mask = y.notnull()
    X = X[non_null_mask.values]
    y = y[non_null_mask]

# Optional: sample for quick experimentation
# df_sample = df.sample(n=2000, random_state=42)
# X = vectorizer.fit_transform(df_sample['clean_text'])
# y = df_sample['emotion']

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train and evaluate the model with one kernel
kernel = 'linear'  # Try 'rbf', 'poly', 'sigmoid' later
model = SVC(kernel=kernel, max_iter=1000)  # Limit iterations for speed
print(f"\nTraining SVM with kernel = {kernel}...")
model.fit(X_train, y_train)

# Step 6: Predict and evaluate
predictions = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, predictions))
print("Classification Report:\n", classification_report(y_test, predictions))

kernel = 'rbf'  # Try 'poly', 'sigmoid' later
model = SVC(kernel=kernel, max_iter=1000)  # Limit iterations for speed
print(f"\nTraining SVM with kernel = {kernel}...")
model.fit(X_train, y_train)

# Step 6: Predict and evaluate
predictions = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, predictions))
print("Classification Report:\n", classification_report(y_test, predictions))

kernel = 'poly'
model = SVC(kernel=kernel, max_iter=1000)  # Limit iterations for speed
print(f"\nTraining SVM with kernel = {kernel}...")
model.fit(X_train, y_train)

# Step 6: Predict and evaluate
predictions = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, predictions))
print("Classification Report:\n", classification_report(y_test, predictions))

kernel = 'sigmoid'
model = SVC(kernel=kernel, max_iter=1000)  # Limit iterations for speed
print(f"\nTraining SVM with kernel = {kernel}...")
model.fit(X_train, y_train)

# Step 6: Predict and evaluate
predictions = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, predictions))
print("Classification Report:\n", classification_report(y_test, predictions))